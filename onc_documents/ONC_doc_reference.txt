=== Discover Data Products ===

# Discover Data Products

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/dataProducts](https://data.oceannetworks.ca/OpenAPI#get-/dataProducts)

### Get all data products and their individual parameters from Oceans 3.0

```python
onc.getDataProducts()
```

### Get the data product options that are available for a specific data product code

Return all data product options for the _dataProductCode_ "**TSSD**" ("Time Series Scalar Data").

```python
params = {
    "dataProductCode": "TSSD",
}
onc.getDataProducts(params)
```

### Get all data product options that are available with a specific file extension

Return all data product options which are available for the _extension_ "**pdf**".

```python
params = {
    "extension": "pdf",
}
onc.getDataProducts(params)
```

### Get all data product options available for a specific data product code and specific file extension

Return all data product options which are available for the _dataProductCode_ "**TSSD**" and _extension_ "**csv**".

```python
params = {
    "dataProductCode": "TSSD",
    "extension": "csv",
}
onc.getDataProducts(params)
```

### Get all data product options which have a certain word in the data product name

Return all data product options which have "**scalar**" in the name.

```python
params = {
    "dataProductName": "scalar",
}
onc.getDataProducts(params)
```

### Get all data product options that are available at a specific location on ONCs network

Return all data product options that are available at the location with the _locationCode_ "**BACAX**" ("Barkley Canyon
Axis (POD1)").

```python
params = {
    "locationCode": "BACAX",
}
onc.getDataProducts(params)
```

### Get all data product options that are available for a specific file extension at a specific locationCode

Return all data product options that are available for the _extension_ "**mat**" at the location with the
_locationCode_ "**BACAX**" ("Barkley Canyon Axis (POD1)").

```python
params = {
    "extension": "mat",
    "locationCode": "BACAX",
}
onc.getDataProducts(params)
```

### Get all data products and their filter parameter options that are available on a specific deployed device

Return all data product codes available for a device with the _deviceCode_ "**NORTEKAQDPRO8398**".

```python
params = {
    "deviceCode": "NORTEKAQDPRO8398",
}
onc.getDataProducts(params)
```

### Get all data product options that are available for a specific device category

Return all data product options which are available for the _deviceCategoryCode_ "**ADCP150KHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP150KHZ",
}
onc.getDataProducts(params)
```



=== Discover Deployments ===

# Discover Deployments

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/deployments](https://data.oceannetworks.ca/OpenAPI#get-/deployments)

### Get all deployments for a specific device code

Return the deployments for the device with the _deviceCode_ "**NORTEKAQDPRO8398**".

```python
params = {
    "deviceCode": "NORTEKAQDPRO8398",
}
onc.getDeployments(params)
```

### Get all deployments at a specific location

Return all deployments at the location with the _locationCode_ "**BACAX**".

```python
params = {
    "locationCode": "BACAX",
}
onc.getDeployments(params)
```

### Get all deployments with a specific device category

Return all deployments with the _deviceCategoryCode_ "**ADCP2MHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP2MHZ",
}
onc.getDeployments(params)
```

### Get all deployments with a specific property

Return all deployments with instruments that measure the property "**oxygen**".

```python
params = {
    "propertyCode": "oxygen",
}
onc.getDeployments(params)
```

### Get all deployments with a specific device category and a specific property

Return all deployments that have devices with the device category "**CTD**" and property "**pressure**".

```python
params = {
    "deviceCategoryCode": "CTD",
    "propertyCode": "pressure",
}
onc.getDeployments(params)
```

### Get all deployments between two dates

Return all deployments between 1 July 2010 and 30 June 2011.
Check [here](https://wiki.oceannetworks.ca/display/O2A/Glossary+of+Terms#GlossaryofTerms-ISO8601Duration) for additional
information about the supported dates/times format.

```python
params = {
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDeployments(params)
```

### Get all deployments at a specific location, between two dates

Return all deployments between 1 July 2010 and 30 June 2011, at the location with the _locationCode_ "**BACAX**" ("
Barkely Canyon Axis (POD1)").

```python
params = {
    "locationCode": "BACAX",
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDeployments(params)
```

### Get all deployments at a specific location, between two dates, with a sensor with a specific property code

Return all deployments between 1 July 2010 and 30 June 2011, at the location with the _locationCode_ "**BACAX**" ("
Barkely Canyon Axis (POD1)"), with the _propertyCode_ "**seawatertemperature**".

```python
params = {
    "locationCode": "BACAX",
    "propertyCode": "seawatertemperature",
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDeployments(params)
```



=== Discover Device Categories ===

# Discover Device Categories

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/deviceCategories](https://data.oceannetworks.ca/OpenAPI#get-/deviceCategories)

### Get all device categories

```python
onc.getDeviceCategories()
```

### Get the device category for a specific device category code

Return the device category information for the _deviceCategoryCode_ "**ADCP150KHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP150KHZ",
}
onc.getDeviceCategories(params)
```

### Get all device categories which have a certain word in the name

Return all device categories which have "**acoustic**" in the name.

```python
params = {
    "deviceCategoryName": "acoustic",
}
onc.getDeviceCategories(params)
```

### Get all device categories which have a certain word in the description

Return all device categories which have "**doppler**" in the description.

```python
params = {
    "description": "doppler",
}
onc.getDeviceCategories(params)
```

### Get all device categories that are available at a specific location

Return all device categories that are available at the location with the _locationCode_ "**BACAX**" ("Barkley Canyon
Axis (POD1)").

```python
params = {
    "locationCode": "BACAX",
}
onc.getDeviceCategories(params)
```

### Get all the device categories which have devices that have a specific property

Return all device categories which have devices with the propertyCode "**salinity**".

```python
params = {
    "propertyCode": "salinity",
}
onc.getDeviceCategories(params)
```



=== Discover Devices ===

# Discover Devices

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/devices](https://data.oceannetworks.ca/OpenAPI#get-/devices)

### Get all available devices

```python
onc.getDevices()
```

### Get the device information for a specific device code

Return the device with the _deviceCode_ "**NORTEKAQDPRO8398**".

```python
params = {
    "deviceCode": "NORTEKAQDPRO8398",
}
onc.getDevices(params)
```

### Get all devices which have a certain word in the device name

Return all devices with "**jasco**" in the name.

```python
params = {
    "deviceName": "jasco",
}
onc.getDevices(params)
```

### Get all devices that have been deployed at a specific location

Return all devices that have been deployed at the location with the _locationCode_ "**BACAX**".

```python
params = {
    "locationCode": "BACAX",
}
onc.getDevices(params)
```

### Get all devices from a specific device category

Return all devices with the _deviceCategoryCode_ "**ADCP2MHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP2MHZ",
}
onc.getDevices(params)
```

### Get all devices with a specific property code

Return all devices that measures the propertyCode "**oxygen**".

```python
params = {
    "propertyCode": "oxygen",
}
onc.getDevices(params)
```

### Get all devices with a specific device category and a specific property code

Return all devices that has the device category "**CTD**" and property "**pressure**".

```python
params = {
    "deviceCategoryCode": "CTD",
    "propertyCode": "pressure",
}
onc.getDevices(params)
```

### Get all devices that support a specific data product code

Return all devices that support the dataProductCode "**IBPP**" ("Ice Buoy Profile Plots").

```python
params = {
    "dataProductCode": "IBPP",
}
onc.getDevices(params)
```

### Get all devices deployed between two dates

Return all devices deployed between 1 July 2010 and 30 June 2011.
Check [here](https://wiki.oceannetworks.ca/display/O2A/Glossary+of+Terms#GlossaryofTerms-ISO8601Duration) for additional
information about the supported dates/times format.

```python
params = {
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDevices(params)
```

### Get all devices deployed at a specific location, between two dates

Return all devices deployed between 1 July 2010 and 30 June 2011, at the location with the _locationCode_ "**BACAX**" ("
Barkely Canyon Axis (POD1)").

```python
params = {
    "locationCode": "BACAX",
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDevices(params)
```

### Get all devices deployed at a specific location, between two dates, with a sensor of a specific property code

Return all devices deployed between 1 July 2010 and 30 June 2011, at the location with the _locationCode_ "**BACAX**" ("
Barkely Canyon Axis (POD1)"), with the _propertyCode_ "**seawatertemperature**".

```python
params = {
    "locationCode": "BACAX",
    "propertyCode": "seawatertemperature",
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getDevices(params)
```



=== Discover Locations ===

# Discover Locations

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/locations](https://data.oceannetworks.ca/OpenAPI#get-/locations)

### Get all locations

```python
onc.getLocations()
```

### Get the location for a specific location code

Return the location with the _locationCode_ "**BACAX**".

```python
params = {
    "locationCode": "BACAX",
}
onc.getLocations(params)
```

### Get all locations, including and underneath a location in the Oceans 3.0 Data Search Tree

Return all locations including and below location Northeast Pacific (locationCode:"**NEP**") in the Oceans
3.0 [Data Search Tree](https://data.oceannetworks.ca/DataSearch?locationCode=NEP).

```python
params = {
    "locationCode": "NEP",
    "includeChildren": "true",
}
onc.getLocations(params)
```

### Get all locations with instruments of a specific device category, including and below a location in the Oceans 3.0 Data Search Tree

Return all locations in Northeast Pacific (locationCode:"**NEP**") with hydrophones deployed.

```python
params = {
    "locationCode": "NEP",
    "deviceCategoryCode": "HYDROPHONE",
    "includeChildren": "true",
}
onc.getLocations(params)
```

### Get all locations which have a certain word in the location name

Return all locations with "**underwater**" as part of the name.

```python
params = {
    "locationName": "underwater",
}
onc.getLocations(params)
```

### Get all locations with instruments from a specific device category

Return all locations which have at least one instrument for the _deviceCategoryCode_ "**ADCP150KHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP150KHZ",
}
onc.getLocations(params)
```

### Get all locations with instruments that have a specific property code

Return all locations that have instruments that measures the property "**totalpressure**".

```python
params = {
    "propertyCode": "totalpressure",
}
onc.getLocations(params)
```

### Get all locations with instruments that have a specific device category and a specific property

Return all locations with at least one instrument that has the device category "**BPR**" and property code.
"**totalpressure**".

```python
params = {
    "deviceCategoryCode": "BPR",
    "propertyCode": "totalpressure",
}
onc.getLocations(params)
```

### Get all locations where a specific device has been deployed

Return all locations where a device with the unique _deviceCode_ "**NORTEKAQDPRO8398**" has been deployed.

```python
params = {
    "deviceCode": "NORTEKAQDPRO8398",
}
onc.getLocations(params)
```

### Get all locations with instruments that support a specific data product code

Return all Locations with instruments that support the _dataProductCode_ "**IBPP**" ("Ice Buoy Profile Plots").

```python
params = {
    "dataProductCode": "IBPP",
}
onc.getLocations(params)
```

### Get all locations with instruments deployed between two dates

Return all locations with instruments that were deployed between 1 July 2010 and 30 June 2011.
Check [here](https://wiki.oceannetworks.ca/display/O2A/Glossary+of+Terms#GlossaryofTerms-ISO8601Duration) for additional
information about the supported dates/times format.

```python
params = {
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getLocations(params)
```

### Get all locations with instruments deployed between two dates, with a sensor for a specific property

Return all locations with instruments that were deployed between 1 July 2010 and 30 June 2011, and have a sensor for the
_propertyCode_ "**seawatertemperature**".

```python
params = {
    "propertyCode": "seawatertemperature",
    "dateFrom": "2010-07-01",
    "dateTo": "2011-06-30T23:59:59.999Z",
}
onc.getLocations(params)
```

## [/locations/tree](https://data.oceannetworks.ca/OpenAPI#get-/locations/tree)

### Get location hierarchy including and below a specific location

Return the location hierarchy from the "**MOBP**" ("Mobile Platforms") node and below.

```python
params = {
    "locationCode": "MOBP",
}
onc.getLocationsTree(params)

# Alias method name
# onc.getLocationHierarchy(params)
```



=== Discover Properties ===

# Discover Properties

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/properties](https://data.oceannetworks.ca/OpenAPI#get-/properties)

### Get all properties

```python
onc.getProperties()
```

### Get the property information for a specific property code

Return the property for the _propertyCode_ "**seawatertemperature**".

```python
params = {
    "propertyCode": "seawatertemperature",
}
onc.getProperties(params)
```

### Get all properties which have a certain word in the property name

Return all properties which have "**pressure**" in the name.

```python
params = {
    "propertyName": "pressure",
}
onc.getProperties(params)
```

### Get all of the properties that are available at a specific location

Return all properties that are available at the location with the _locationCode_ "**BACAX**" ("Barkley Canyon Axis (
POD1)").

```python
params = {
    "locationCode": "BACAX",
}
onc.getProperties(params)
```

### Get all properties that are available for specific device

Return all properties available for a device with the _deviceCode_ "**NORTEKAQDPRO8398**".

```python
params = {
    "deviceCode": "NORTEKAQDPRO8398",
}
onc.getProperties(params)
```

### Get all properties that are available for a specific device category

Return all properties which are available for the device category "**ADCP150KHZ**".

```python
params = {
    "deviceCategoryCode": "ADCP150KHZ",
}
onc.getDeviceCategories(params)
```



=== Download Archived Files ===

# Download Archived Files

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/archivefile/device](https://data.oceannetworks.ca/OpenAPI#get-/archivefile/device)

### Get a list of all archived files available from a specific device for a specific time-range

Return the archived files for a device with _deviceCode_ "**RDIADCP600WH25471**"

```python
params = {
    "deviceCode": "RDIADCP600WH25471",
    "dateFrom": "2019-06-07T00:00:00.000Z",
    "dateTo": "2019-06-08T00:00:00.000Z",
}

onc.getArchivefile(params)

# Longer method name
# onc.getArchivefileByDevice(params)

# Alias method name
# onc.getListByDevice(params)
```

### Get a list of all archived files available from a specific device for a specific time-range with a specific extension

Return the archived files for an ADCP instrument with _deviceCode_ "**RDIADCP600WH25471**" that have _rdi_ as the
extension name.

```python
params = {
    "deviceCode": "RDIADCP600WH25471",
    "extension": "rdi",
    "dateFrom": "2019-06-07T00:00:00.000Z",
    "dateTo": "2019-06-08T00:00:00.000Z",
}

onc.getArchivefile(params)

# Longer method name
# onc.getArchivefileByDevice(params)

# Alias method name
# onc.getListByDevice(params)
```

### Download a file by its filename

```python

onc.downloadArchivefile("ICLISTENHF1560_20181005T000403.000Z-spect.mat", overwrite=True)

# Alias method name
# onc.getFile("ICLISTENHF1560_20181005T000403.000Z-spect.mat", overwrite=True)
```

## [/archivefile/location](https://data.oceannetworks.ca/OpenAPI#get-/archivefile/location)

### Get a list of all archived files available from a specific location and a device category for a specific time-range

Return the archived files for a device with _deviceCategoryCode_ "**HYDROPHONE**" at location Straight of Georgia East (
_locationCode_:"**SEVIP**")

```python
params = {
    "deviceCategoryCode": "HYDROPHONE",
    "locationCode": "SEVIP",
    "dateFrom": "2018-10-05T00:05:00.000Z",
    "dateTo": "2018-10-05T00:06:00.000Z",
}

onc.getArchivefile(params)

# Longer method name
# onc.getArchivefileByLocation(params)

# Alias method name
# onc.getListByLocation(params)
```

### Get a list of all archived files available from a specific location and a device category for a specific time-range with a specific file extension

Return the archived files for a device with _deviceCategoryCode_ "**HYDROPHONE**" at location Straight of Georgia East (
_locationCode_:"**SEVIP**") with file extension "**mat**".

```python
params = {
    "deviceCategoryCode": "HYDROPHONE",
    "locationCode": "SEVIP",
    "extension": "mat",
    "dateFrom": "2018-10-05T00:05:00.000Z",
    "dateTo": "2018-10-05T00:06:00.000Z",
}

onc.getArchivefile(params)

# Longer method name
# onc.getArchivefileByLocation(params)

# Alias method name
# onc.getListByLocation(params)
```

## Download archived files that match the parameters

Download all "mat" files from a hydrophone at Straight of Georgia East (_locationCode_:"**SEVIP**").

```python
params = {
    "deviceCategoryCode": "HYDROPHONE",
    "locationCode": "SEVIP",
    "extension": "mat",
    "dateFrom": "2018-10-05T00:05:00.000Z",
    "dateTo": "2018-10-05T00:06:00.000Z",
}

onc.downloadDirectArchivefile(params)

# Alias method name
# onc.getDirectFiles(params)

```

## Download archived files using a download manager

Return the download URLs from a hydrophone at Straight of Georgia East (_locationCode_:"**SEVIP**").

```python
params = {
    "deviceCategoryCode": "HYDROPHONE",
    "locationCode": "SEVIP",
    "extension": "mat",
    "dateFrom": "2018-10-05T00:00:00.000Z",
    "dateTo": "2018-10-05T00:10:00.000Z",
}

# print is necessary to render the newline character
print(onc.getArchivefileUrls(params, joinedWithNewline=True))
```

After running the code, a list of URLs will be printed.

```
https://data.oceannetworks.ca/api/archivefile/download?filename=ICLISTENHF1560_20181004T235903.000Z-spect.mat&token=Your_TOKEN
https://data.oceannetworks.ca/api/archivefile/download?filename=ICLISTENHF1560_20181005T000403.000Z-spect.mat&token=Your_TOKEN
https://data.oceannetworks.ca/api/archivefile/download?filename=ICLISTENHF1560_20181005T000903.000Z-spect.mat&token=Your_TOKEN
```

At this point, you can open your favorite download manager, paste the URLs, and start the download.
Most modern download managers support batch download, probably from a multi-line text input, the clipboard or a file.

Here is an example of using a popular open source download manager -- aria2.

### webui-aria2

[aria2](https://aria2.github.io/) is a lightweight multi-protocol & multi-source command-line download utility.
[webui-aria2](https://github.com/ziahamza/webui-aria2) is a web interface to interact with aria2.
Refer to the webui-aria2 [README](https://github.com/ziahamza/webui-aria2?tab=readme-ov-file#webui-aria2) file
for more information on how to use the tool.

1. Install aria2 by downloading it from the [release](https://github.com/aria2/aria2/releases)
   (or use your package manager if you are on Linux), extract the zip file,
   and start the server by running

```shell
./aria2c --enable-rpc --rpc-listen-all
```

2. Go to <https://ziahamza.github.io/webui-aria2> (or you can download this repository and open index.html
   from docs folder), change "Enter the host" field to "localhost" in the setting, and save the settings.
   Sometimes you need to also refresh the page.
   ![Aria2c host change.png](../_static/Code_Examples/webui-aria2c-host.png)

3. Click "Add" -> "By URIs" in the menu. Fill in the URLs and start the download.
   You can also customize the download in the "Download settings" like changing the download directory.
   ![Aria2c add URLs.png](../_static/Code_Examples/webui-aria2c-add-uri.png)



=== Download Data Products ===

# Download Data Products

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## Request, run, and download a data product

### Download a time-series data plot with file extension _png_ from a CTD located at Straight of Georgia East

```python
params = {
    "locationCode": "SEVIP",
    "deviceCategoryCode": "CTD",
    "dataProductCode": "TSSP",
    "extension": "png",
    "dateFrom": "2019-06-20T00:00:00.000Z",
    "dateTo": "2019-06-21T00:00:00.000Z",
    "dpo_qualityControl": "1",
    "dpo_resample": "none",
}
result = onc.orderDataProduct(params, includeMetadataFile=False)
```

### Download _csv_ files of time series scalar data readings from amn ADCP device located at Barkley Canyon Axis

```python
params = {
    "locationCode": "BACAX",
    "deviceCategoryCode": "ADCP2MHZ",
    "dataProductCode": "TSSD",
    "extension": "csv",
    "dateFrom": "2016-07-27T00:00:00.000Z",
    "dateTo": "2016-08-01T00:00:00.000Z",
    "dpo_qualityControl": 1,
    "dpo_resample": "none",
    "dpo_dataGaps": 0,
}
result = onc.orderDataProduct(params)
```



=== Request Real Time Data ===

# Request (Near) Real-Time Data

```python
# Get the token from your Oceans 3.0 profile page
from onc import ONC

onc = ONC("YOUR_TOKEN")
```

## [/scalardata/location](https://data.oceannetworks.ca/OpenAPI#get-/scalardata/location)

### Get the last scalar data reading available from a device in a location

```python
params = {
    "locationCode": "SEVIP",
    "deviceCategoryCode": "CTD",
    "rowLimit": "1",
    "getLatest": "true",
}

onc.getScalardata(params)

# Longer method name
# onc.getScalardataByLocation(params)

# Alias method name
# onc.getDirectByLocation(params)
```

### Get 1 minute of time-series scalar data readings from a a device in a location

```python
params = {
    "locationCode": "SEVIP",
    "deviceCategoryCode": "CTD",
    "dateFrom": "2016-09-01T00:00:00.000Z",
    "dateTo": "2016-09-01T00:01:00.000Z",
}

onc.getScalardata(params)

# Longer method name
# onc.getScalardataByLocation(params)

# Alias method name
# onc.getDirectByLocation(params)
```

### Get 10 seconds of raw CTD data readings from a location

```python
params = {
    "locationCode": "BACAX",
    "deviceCategoryCode": "CTD",
    "dateFrom": "2017-05-23T00:00:00.000Z",
    "dateTo": "2017-05-23T00:00:10.000Z",
}

onc.getRawdata(params)["data"]["readings"]

# Longer method name
# onc.getRawdataByLocation(params)["data"]["readings"]

# Alias method name
# onc.getDirectRawByLocation(params)["data"]["readings"]
```

## [/scalardata/device](https://data.oceannetworks.ca/OpenAPI#get-/scalardata/device)

### Get 10 seconds of raw data readings from a specific device

```python
params = {
    "deviceCode": "AMLMETRECX50348",
    "dateFrom": "2019-06-01T00:00:00.000Z",
    "dateTo": "2019-06-01T00:00:10.000Z",
}

onc.getRawdata(params)

# Longer method name
# onc.getRawdataByDevice(params)

# Alias method name
# onc.getDirectRawByDevice(params)
```

### Get 1 minute of time-series scalar data readings from a specific device

```python
params = {
    "deviceCode": "SBECTD19p4686",
    "dateFrom": "2016-09-01T00:00:00.000Z",
    "dateTo": "2016-09-01T00:01:00.000Z",
}

onc.getScalardata(params)

# Longer method name
# onc.getScalardataByDevice(params)

# Alias method name
# onc.getDirectByDevice(params)
```



